
```{r butcher-block-setup}
# Define butcher block constraints and parameters
MEAT_BASELINE_LENGTH <- 8    # feet
SEAFOOD_BASELINE_LENGTH <- 12 # feet
MIN_MEAT_LENGTH <- 4         # minimum viable length
MIN_SEAFOOD_LENGTH <- 6      # minimum viable length
MAX_MEAT_LENGTH <- 16        # maximum practical length
MAX_SEAFOOD_LENGTH <- 20     # maximum practical length
ADJUSTMENT_INCREMENT <- 2    # adjust in 2-foot increments

# Cost parameters (adjust based on your business)
COST_PER_FOOT_MEAT <- 150    # monthly cost per foot of butcher block
COST_PER_FOOT_SEAFOOD <- 200 # seafood blocks typically more expensive
```

```{r butcher-block-data-prep}
# Prepare butcher block analysis data
butcher_data <- data %>%
  select(
    # Identifiers
    `Store ID`, Division, `District #`, Banner, City, ST,
    # Sales metrics
    `Meat Sales`, `Seafood Sales`, `Total Sales`,
    # Shrink metrics
    `Meat Shrink`, `Seafood Shrink`, `Meat Dept Shrink Pct`, `Seafood Dept Shrink Pct`,
    # Butcher block lengths
    `Meat Butcher Block Length`, `Seafood Butcher Block Length`,
    # Operational metrics
    `Meat Markdown`, `Seafood Markdown`, `Weekly Labor Hours`
  ) %>%
  # Convert to weekly metrics
  mutate(
    across(contains(c("Sales", "Shrink", "Markdown")), ~ . / 52),
    # Clean butcher block lengths
    `Meat Butcher Block Length` = as.numeric(`Meat Butcher Block Length`),
    `Seafood Butcher Block Length` = as.numeric(`Seafood Butcher Block Length`)
  ) %>%
  # Filter out invalid data
  filter(
    !is.na(`Meat Butcher Block Length`),
    !is.na(`Seafood Butcher Block Length`),
    `Meat Butcher Block Length` > 0,
    `Seafood Butcher Block Length` > 0,
    !is.na(`Meat Sales`),
    !is.na(`Seafood Sales`)
  ) %>%
  # Calculate efficiency metrics
  mutate(
    # Sales per foot of butcher block
    Meat_Sales_per_Foot = `Meat Sales` / `Meat Butcher Block Length`,
    Seafood_Sales_per_Foot = `Seafood Sales` / `Seafood Butcher Block Length`,
    
    # Shrink per foot
    Meat_Shrink_per_Foot = `Meat Shrink` / `Meat Butcher Block Length`,
    Seafood_Shrink_per_Foot = `Seafood Shrink` / `Seafood Butcher Block Length`,
    
    # Efficiency ratios (compared to baseline)
    Meat_Length_Efficiency = Meat_Sales_per_Foot / (MEAT_BASELINE_LENGTH * 100),
    Seafood_Length_Efficiency = Seafood_Sales_per_Foot / (SEAFOOD_BASELINE_LENGTH * 100),
    
    # Current vs baseline
    Meat_Length_vs_Baseline = `Meat Butcher Block Length` - MEAT_BASELINE_LENGTH,
    Seafood_Length_vs_Baseline = `Seafood Butcher Block Length` - SEAFOOD_BASELINE_LENGTH
  )

# Add performance categories from previous analysis
butcher_data <- butcher_data %>%
  mutate(
    meat_performance = case_when(
      `Meat Sales` > 1800 & `Meat Dept Shrink Pct` < 0.04 & `Weekly Labor Hours` > 84 ~ "High",
      `Meat Sales` > 1500 & `Meat Dept Shrink Pct` < 0.05 & `Weekly Labor Hours` >= 52 ~ "Medium",
      TRUE ~ "Unprofitable"
    ),
    seafood_performance = case_when(
      `Seafood Sales` > 2000 & `Seafood Dept Shrink Pct` < 0.04 & `Weekly Labor Hours` > 84 ~ "High",
      `Seafood Sales` > 1850 & `Seafood Dept Shrink Pct` < 0.05 & `Weekly Labor Hours` >= 52 ~ "Medium",
      TRUE ~ "Unprofitable"
    )
  )

cat("Butcher Block Analysis Dataset prepared with", nrow(butcher_data), "stores\n")
head(butcher_data)
```

```{r butcher-block-eda}
# Exploratory analysis of butcher block utilization
library(gridExtra)

p1 <- ggplot(butcher_data, aes(x = `Meat Butcher Block Length`, y = Meat_Sales_per_Foot, 
                               color = meat_performance)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_vline(xintercept = MEAT_BASELINE_LENGTH, linetype = "dashed", color = "red") +
  scale_color_manual(values = store_colors) +
  scale_y_continuous(labels = dollar) +
  labs(
    title = "Meat Department: Block Length vs Sales Efficiency",
    x = "Butcher Block Length (feet)",
    y = "Sales per Foot",
    color = "Performance",
    subtitle = "Red line shows baseline length (8 ft)"
  )

p2 <- ggplot(butcher_data, aes(x = `Seafood Butcher Block Length`, y = Seafood_Sales_per_Foot,
                               color = seafood_performance)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_vline(xintercept = SEAFOOD_BASELINE_LENGTH, linetype = "dashed", color = "red") +
  scale_color_manual(values = store_colors) +
  scale_y_continuous(labels = dollar) +
  labs(
    title = "Seafood Department: Block Length vs Sales Efficiency",
    x = "Butcher Block Length (feet)",
    y = "Sales per Foot",
    color = "Performance",
    subtitle = "Red line shows baseline length (12 ft)"
  )

grid.arrange(p1, p2, ncol = 1)
```

```{r efficiency-analysis}
# Analyze efficiency patterns by current length
efficiency_summary <- butcher_data %>%
  mutate(
    Meat_Length_Category = cut(
      `Meat Butcher Block Length`,
      breaks = c(0, 6, 8, 10, 12, Inf),
      labels = c("Very Short (≤6)", "Short (6-8)", "Baseline (8-10)", "Long (10-12)", "Very Long (>12)")
    ),
    Seafood_Length_Category = cut(
      `Seafood Butcher Block Length`,
      breaks = c(0, 8, 12, 16, 20, Inf),
      labels = c("Very Short (≤8)", "Short (8-12)", "Baseline (12-16)", "Long (16-20)", "Very Long (>20)")
    )
  )

# Meat efficiency by length category
meat_efficiency <- efficiency_summary %>%
  group_by(Meat_Length_Category) %>%
  summarise(
    Store_Count = n(),
    Avg_Sales_per_Foot = mean(Meat_Sales_per_Foot, na.rm = TRUE),
    Avg_Shrink_Pct = mean(`Meat Dept Shrink Pct`, na.rm = TRUE),
    High_Performers = sum(meat_performance == "High"),
    High_Performer_Rate = High_Performers / Store_Count,
    .groups = "drop"
  )

# Seafood efficiency by length category
seafood_efficiency <- efficiency_summary %>%
  group_by(Seafood_Length_Category) %>%
  summarise(
    Store_Count = n(),
    Avg_Sales_per_Foot = mean(Seafood_Sales_per_Foot, na.rm = TRUE),
    Avg_Shrink_Pct = mean(`Seafood Dept Shrink Pct`, na.rm = TRUE),
    High_Performers = sum(seafood_performance == "High"),
    High_Performer_Rate = High_Performers / Store_Count,
    .groups = "drop"
  )

cat("=== MEAT DEPARTMENT EFFICIENCY BY BLOCK LENGTH ===\n")
meat_efficiency %>%
  mutate(
    Avg_Sales_per_Foot = dollar(Avg_Sales_per_Foot),
    Avg_Shrink_Pct = percent(Avg_Shrink_Pct, 0.01),
    High_Performer_Rate = percent(High_Performer_Rate, 0.1)
  ) %>%
  kable()

cat("\n=== SEAFOOD DEPARTMENT EFFICIENCY BY BLOCK LENGTH ===\n")
seafood_efficiency %>%
  mutate(
    Avg_Sales_per_Foot = dollar(Avg_Sales_per_Foot),
    Avg_Shrink_Pct = percent(Avg_Shrink_Pct, 0.01),
    High_Performer_Rate = percent(High_Performer_Rate, 0.1)
  ) %>%
  kable()
```

```{r optimization-model}
# Create optimization model
create_butcher_block_recommendations <- function(data) {
  
  # Calculate optimal lengths based on performance and efficiency
  recommendations <- data %>%
    mutate(
      # Meat recommendations
      Meat_Optimal_Length = case_when(
        # High performers with low efficiency per foot - consider reducing
        meat_performance == "High" & Meat_Sales_per_Foot < 200 & 
        `Meat Butcher Block Length` > MEAT_BASELINE_LENGTH ~ 
        pmax(MIN_MEAT_LENGTH, `Meat Butcher Block Length` - 2),
        
        # Medium performers - optimize based on current efficiency
        meat_performance == "Medium" & Meat_Sales_per_Foot > 250 & 
        `Meat Butcher Block Length` < MAX_MEAT_LENGTH ~ 
        pmin(MAX_MEAT_LENGTH, `Meat Butcher Block Length` + 2),
        
        meat_performance == "Medium" & Meat_Sales_per_Foot < 180 & 
        `Meat Butcher Block Length` > MIN_MEAT_LENGTH ~ 
        pmax(MIN_MEAT_LENGTH, `Meat Butcher Block Length` - 2),
        
        # Unprofitable stores - usually reduce to minimum efficient size
        meat_performance == "Unprofitable" & `Meat Butcher Block Length` > 6 ~ 
        pmax(MIN_MEAT_LENGTH, 6),
        
        # Default: keep current length
        TRUE ~ `Meat Butcher Block Length`
      ),
      
      # Seafood recommendations
      Seafood_Optimal_Length = case_when(
        # High performers with low efficiency per foot - consider reducing
        seafood_performance == "High" & Seafood_Sales_per_Foot < 150 & 
        `Seafood Butcher Block Length` > SEAFOOD_BASELINE_LENGTH ~ 
        pmax(MIN_SEAFOOD_LENGTH, `Seafood Butcher Block Length` - 2),
        
        # Medium performers - optimize based on current efficiency
        seafood_performance == "Medium" & Seafood_Sales_per_Foot > 200 & 
        `Seafood Butcher Block Length` < MAX_SEAFOOD_LENGTH ~ 
        pmin(MAX_SEAFOOD_LENGTH, `Seafood Butcher Block Length` + 2),
        
        seafood_performance == "Medium" & Seafood_Sales_per_Foot < 120 & 
        `Seafood Butcher Block Length` > MIN_SEAFOOD_LENGTH ~ 
        pmax(MIN_SEAFOOD_LENGTH, `Seafood Butcher Block Length` - 2),
        
        # Unprofitable stores - usually reduce to minimum efficient size
        seafood_performance == "Unprofitable" & `Seafood Butcher Block Length` > 8 ~ 
        pmax(MIN_SEAFOOD_LENGTH, 8),
        
        # Default: keep current length
        TRUE ~ `Seafood Butcher Block Length`
      )
    ) %>%
    mutate(
      # Calculate changes
      Meat_Length_Change = Meat_Optimal_Length - `Meat Butcher Block Length`,
      Seafood_Length_Change = Seafood_Optimal_Length - `Seafood Butcher Block Length`,
      
      # Create recommendation text
      Meat_Recommendation = case_when(
        Meat_Length_Change > 0 ~ paste("INCREASE by", Meat_Length_Change, "feet"),
        Meat_Length_Change < 0 ~ paste("DECREASE by", abs(Meat_Length_Change), "feet"),
        TRUE ~ "MAINTAIN current length"
      ),
      
      Seafood_Recommendation = case_when(
        Seafood_Length_Change > 0 ~ paste("INCREASE by", Seafood_Length_Change, "feet"),
        Seafood_Length_Change < 0 ~ paste("DECREASE by", abs(Seafood_Length_Change), "feet"),
        TRUE ~ "MAINTAIN current length"
      ),
      
      # Calculate cost impact (monthly)
      Meat_Cost_Change = Meat_Length_Change * COST_PER_FOOT_MEAT,
      Seafood_Cost_Change = Seafood_Length_Change * COST_PER_FOOT_SEAFOOD,
      Total_Cost_Change = Meat_Cost_Change + Seafood_Cost_Change,
      
      # Estimate sales impact (conservative estimate)
      Estimated_Meat_Sales_Impact = case_when(
        Meat_Length_Change > 0 ~ Meat_Length_Change * Meat_Sales_per_Foot * 0.8, # 80% efficiency for new space
        Meat_Length_Change < 0 ~ Meat_Length_Change * Meat_Sales_per_Foot, # Full impact of reduction
        TRUE ~ 0
      ),
      
      Estimated_Seafood_Sales_Impact = case_when(
        Seafood_Length_Change > 0 ~ Seafood_Length_Change * Seafood_Sales_per_Foot * 0.8,
        Seafood_Length_Change < 0 ~ Seafood_Length_Change * Seafood_Sales_per_Foot,
        TRUE ~ 0
      ),
      
      Total_Sales_Impact = Estimated_Meat_Sales_Impact + Estimated_Seafood_Sales_Impact,
      
      # ROI calculation (weekly sales impact vs monthly cost)
      Weekly_ROI = (Total_Sales_Impact * 4) / (abs(Total_Cost_Change) + 1), # +1 to avoid division by zero
      
      # Priority score
      Priority_Score = case_when(
        abs(Total_Cost_Change) > 500 & Weekly_ROI > 2 ~ "HIGH",
        abs(Total_Cost_Change) > 200 & Weekly_ROI > 1 ~ "MEDIUM",
        Total_Cost_Change != 0 ~ "LOW",
        TRUE ~ "NO CHANGE"
      )
    )
  
  return(recommendations)
}

# Generate recommendations
butcher_recommendations <- create_butcher_block_recommendations(butcher_data)

# Summary of recommendations
recommendation_summary <- butcher_recommendations %>%
  summarise(
    Total_Stores = n(),
    Stores_with_Changes = sum(Meat_Length_Change != 0 | Seafood_Length_Change != 0),
    Meat_Increases = sum(Meat_Length_Change > 0),
    Meat_Decreases = sum(Meat_Length_Change < 0),
    Seafood_Increases = sum(Seafood_Length_Change > 0),
    Seafood_Decreases = sum(Seafood_Length_Change < 0),
    High_Priority = sum(Priority_Score == "HIGH"),
    Medium_Priority = sum(Priority_Score == "MEDIUM"),
    Total_Cost_Impact = sum(Total_Cost_Change),
    Total_Sales_Impact = sum(Total_Sales_Impact)
  )

cat("=== BUTCHER BLOCK OPTIMIZATION SUMMARY ===\n")
print(recommendation_summary)
```

```{r top-recommendations}
# Show top recommendations by priority and impact
high_impact_recommendations <- butcher_recommendations %>%
  filter(Priority_Score %in% c("HIGH", "MEDIUM")) %>%
  select(
    `Store ID`, Division, Banner,
    meat_performance, seafood_performance,
    `Meat Butcher Block Length`, Meat_Optimal_Length, Meat_Recommendation,
    `Seafood Butcher Block Length`, Seafood_Optimal_Length, Seafood_Recommendation,
    Total_Cost_Change, Total_Sales_Impact, Weekly_ROI, Priority_Score
  ) %>%
  arrange(desc(Priority_Score), desc(abs(Total_Cost_Change)))

cat("\n=== TOP PRIORITY BUTCHER BLOCK RECOMMENDATIONS ===\n")
high_impact_recommendations %>%
  head(15) %>%
  mutate(
    Total_Cost_Change = dollar(Total_Cost_Change),
    Total_Sales_Impact = dollar(Total_Sales_Impact),
    Weekly_ROI = round(Weekly_ROI, 2)
  ) %>%
  kable()
```

```{r recommendation-visualization}
# Visualize recommendations
p1 <- ggplot(butcher_recommendations, aes(x = Meat_Length_Change, fill = meat_performance)) +
  geom_histogram(bins = 15, alpha = 0.7, position = "stack") +
  scale_fill_manual(values = store_colors) +
  labs(
    title = "Distribution of Meat Block Length Changes",
    x = "Recommended Length Change (feet)",
    y = "Number of Stores",
    fill = "Performance"
  ) +
  theme_minimal()

p2 <- ggplot(butcher_recommendations, aes(x = Seafood_Length_Change, fill = seafood_performance)) +
  geom_histogram(bins = 15, alpha = 0.7, position = "stack") +
  scale_fill_manual(values = store_colors) +
  labs(
    title = "Distribution of Seafood Block Length Changes",
    x = "Recommended Length Change (feet)",
    y = "Number of Stores",
    fill = "Performance"
  ) +
  theme_minimal()

p3 <- ggplot(butcher_recommendations, aes(x = Total_Cost_Change, y = Total_Sales_Impact, 
                                         color = Priority_Score, size = abs(Weekly_ROI))) +
  geom_point(alpha = 0.7) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_vline(xintercept = 0, linetype = "dashed") +
  scale_x_continuous(labels = dollar) +
  scale_y_continuous(labels = dollar) +
  scale_color_manual(values = c("HIGH" = "red", "MEDIUM" = "orange", "LOW" = "yellow", "NO CHANGE" = "gray")) +
  labs(
    title = "Cost vs Sales Impact of Recommendations",
    x = "Monthly Cost Change",
    y = "Weekly Sales Impact",
    color = "Priority",
    size = "ROI"
  ) +
  theme_minimal()

grid.arrange(p1, p2, p3, ncol = 1)
```

```{r export-recommendations}
# Create final recommendation export
final_recommendations <- butcher_recommendations %>%
  select(
    `Store ID`, Division, Banner, City, ST,
    # Current metrics
    `Meat Sales`, `Seafood Sales`,
    meat_performance, seafood_performance,
    Meat_Sales_per_Foot, Seafood_Sales_per_Foot,
    # Current lengths
    `Meat Butcher Block Length`, `Seafood Butcher Block Length`,
    # Recommendations
    Meat_Optimal_Length, Seafood_Optimal_Length,
    Meat_Recommendation, Seafood_Recommendation,
    # Impact
    Total_Cost_Change, Total_Sales_Impact, Weekly_ROI, Priority_Score
  ) %>%
  arrange(desc(Priority_Score), desc(abs(Total_Cost_Change)))

# Save to CSV (uncomment if you want to export)
# write_csv(final_recommendations, "butcher_block_recommendations.csv")

cat("=== SAMPLE OF FINAL RECOMMENDATIONS ===\n")
final_recommendations %>%
  head(10) %>%
  select(`Store ID`, Banner, Meat_Recommendation, Seafood_Recommendation, Priority_Score) %>%
  kable()

cat(paste("\nTotal stores analyzed:", nrow(final_recommendations)))
cat(paste("\nStores with recommended changes:", sum(final_recommendations$Priority_Score != "NO CHANGE")))
cat(paste("\nHigh priority changes:", sum(final_recommendations$Priority_Score == "HIGH")))
```
